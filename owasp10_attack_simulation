# Run the script from your terminal. It will send 47 requests for each of the 10 attack types.
# Monitor via Apache logs (or the Signal Sciences dashboard, for this instance) to see how the attacks are detected.



import requests
from multiprocessing import Pool

# URL of your Apache server
url = "http://127.0.0.1/"

# Define payloads for each of the OWASP Top 10 attacks
payloads = [
    # 1. Injection (SQLi)
    {"type": "SQL Injection", "params": {"id": "1' OR '1'='1"}},

    # 2. Broken Authentication (Brute force attempt)
    {"type": "Broken Authentication", "params": {"username": "admin", "password": "password"}},

    # 3. Sensitive Data Exposure (simulating access to sensitive endpoints)
    {"type": "Sensitive Data Exposure", "endpoint": "/admin/config.php", "params": {}},

    # 4. XML External Entities (XXE)
    {"type": "XXE", "data": """<?xml version="1.0"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><root>&xxe;</root>""",
     "headers": {"Content-Type": "application/xml"}},

    # 5. Broken Access Control
    {"type": "Broken Access Control", "endpoint": "/admin/dashboard", "params": {}},

    # 6. Security Misconfiguration (Accessing an unprotected sensitive config file)
    {"type": "Security Misconfiguration", "endpoint": "/.env", "params": {}},

    # 7. Cross-Site Scripting (XSS)
    {"type": "Cross-Site Scripting (XSS)", "params": {"q": "<script>alert('XSS')</script>"}},

    # 8. Insecure Deserialization
    {"type": "Insecure Deserialization", "data": "O:8:\"Exploit\":0:{}", "headers": {"Content-Type": "application/octet-stream"}},

    # 9. Using Components with Known Vulnerabilities (sending a specific path known to be vulnerable)
    {"type": "Vulnerable Component", "endpoint": "/vulnerable/path", "params": {}},

    # 10. Insufficient Logging & Monitoring (simulated by sending non-standard headers)
    {"type": "Insufficient Logging & Monitoring", "params": {}, "headers": {"X-Custom-Header": "nonstandard"}}
]

# Function to send requests with different payloads
def send_request(payload):
    try:
        # If data is provided, use POST, otherwise use GET
        if "data" in payload:
            response = requests.post(url + payload.get("endpoint", ""), data=payload["data"], headers=payload.get("headers", {}))
        else:
            response = requests.get(url + payload.get("endpoint", ""), params=payload["params"], headers=payload.get("headers", {}))
        
        print(f"Sent {payload['type']} request, Response: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    # Generate 47 requests for each payload type
    requests_to_send = []
    for payload in payloads:
        requests_to_send.extend([payload] * 47)

    # Use multiprocessing to send requests in parallel
    with Pool(50) as p:
        p.map(send_request, requests_to_send)
